# englishAudioBot/main.py

import logging
import tempfile
from io import BytesIO
import re

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode, ChatType
from aiogram.types import Message, FSInputFile
from aiogram.client.default import DefaultBotProperties

from englishAudioBot.textToSpeech import generate_audio_bytes
from englishAudioBot.extract import extract_data

import os
import asyncio

BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)


bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

DISCUSSION_CHAT_ID = os.getenv("DISCUSSION_CHAT_ID")
ENGLISH_PATTERN = re.compile(r"^[A-Za-z0-9\s.,!?\"'‚Äô\-]+$")


@dp.message(CommandStart(), F.chat.type == ChatType.PRIVATE)
async def handle_start_command(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ @Fluently_Channel –¥–ª—è –æ–∑–≤—É—á–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n"
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –µ–≥–æ –æ–∑–≤—É—á–∫—É!"
    )


@dp.message(F.chat.type == ChatType.PRIVATE, F.text)
async def handle_private_tts_request(message: Message):
    text = message.text.strip()

    if len(text) > 200:
        await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ú–∞–∫—Å–∏–º—É–º ‚Äî 200 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    if not ENGLISH_PATTERN.fullmatch(text):
        await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ (–±–µ–∑ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–º–∞–π–ª–∏–∫–æ–≤)")
        return

    try:
        logging.info(f"üì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ–∑–≤—É—á–∫—É: {text}")
        audio_fp: BytesIO = await generate_audio_bytes(text)

        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp_file:
            tmp_file.write(audio_fp.read())
            tmp_path = tmp_file.name

        voice_file = FSInputFile(tmp_path)

        await message.answer_voice(
            voice=voice_file,
            caption="üéß –ì–æ—Ç–æ–≤–æ!"
        )

        os.remove(tmp_path)

    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
        await message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∫–∏.")


@dp.message(F.sender_chat)
async def handle_comment_entry_point(message: Message):
    if message.sender_chat.username != "fluently_channel":
        return

    text = message.text or message.caption
    if not text:
        logging.warning("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∏")
        return

    data = extract_data(text)

    english_items = (
        [("‚úèÔ∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", s) for s in data["sentences"]] +
        [("üí¨ –§—Ä–∞–∑–∞", p) for p in data["phrases"]] +
        [("üî§ –°–ª–æ–≤–æ", w) for w in data["words"]]
    )

    if not english_items:
        logging.info("üõë –ù–µ—á–µ–≥–æ –æ–∑–≤—É—á–∏–≤–∞—Ç—å.")
        return

    for label, item_text in english_items:
        try:
            logging.info(f"üéß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏ –¥–ª—è: {item_text}")
            audio_fp = await generate_audio_bytes(item_text)

            with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp_file:
                tmp_file.write(audio_fp.read())
                tmp_path = tmp_file.name

            voice_file = FSInputFile(tmp_path)

            await bot.send_voice(
                chat_id=message.chat.id,
                voice=voice_file,
                caption=f"{label}: <b>{item_text}</b>",
                reply_to_message_id=message.message_id
            )

            os.remove(tmp_path)
            await asyncio.sleep(1)

        except Exception as e:
            logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ ¬´{item_text}¬ª: {e}")


def main():
    dp.run_polling(bot)


if __name__ == "__main__":
    main()
